# -*- coding: utf-8 -*-
# %%
"""
/***************************************************************************
 Example
                                 A QGIS plugin
 Layout
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2022 by hhnk
        email                : j.acostabarragan@hhnk.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from sqlite3 import Row
import sys
import os
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QListWidgetItem

from pathlib import Path

sys.path.append(str(Path(os.getcwd()).parent))
sys.path.append(str(Path(os.getcwd()).parent.parent))

#Initialize Qt resources from file resources.py
from modelselection.resources import *
# Import the code for the dialog
from modelselection.modelselection_dialog import ExampleDialog

import pandas as pd
# Import the code for the plugin content
# GUI
#from hhnk_threedi_plugin.gui.new_project_dialog import newProjectDialog

from PyQt5.QtWidgets import (
    QFileDialog,
    QPushButton,
    QLineEdit,
    QHBoxLayout,
    QWidget,
    QLabel,
    QVBoxLayout,
    QTableView,
    QListView,
)
from PyQt5.QtCore import Qt
from PyQt5.QtCore import pyqtSignal

# import new sqlite 
from modelselection.functions.create_new_sqlite import create_schematisation


# Functions
from hhnk_threedi_tools.core.folders import Folders
class Example:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
  

        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Example_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HHNK_layout')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Example', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/modelselection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Example'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HHNK_layout'),
                action)
            self.iface.removeToolBarIcon(action)


    def get_api(self):
        from threedi_api_client.api import ThreediApi
        from threedi_models_and_simulations.api_calls.threedi_calls import ThreediCalls
        
        THREEDI_API_HOST = "https://api.3di.live"

        self.user=self.dlg.username.text()

        CONFIG = {
            "THREEDI_API_HOST": THREEDI_API_HOST,
            "THREEDI_API_USERNAME": self.user,
            "THREEDI_API_PASSWORD": self.dlg.password.text()
        }
        self.config=CONFIG
        self.threedi_api = ThreediApi(config=CONFIG, version='v3-beta')

        tc = ThreediCalls(self.threedi_api)
        user_profile = tc.fetch_current_user()
        self.user_full_name = f"{user_profile.first_name} {user_profile.last_name}"
        self.organisations = {org.unique_id: org for org in tc.fetch_organisations()}


        #Add check if correct pass
        if False:
            self.dlg.pb__log_in.text = 'Try again'
            self.dlg.pb__log_in.setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')
        elif True:
            self.dlg.pb__log_in.text = 'Logged in'
            self.dlg.pb__log_in.setStyleSheet('QPushButton {background-color: #A3C1DA; color: green;}')

    def add_models(self):
        folder_path = self.dlg.localsave.filePath()
        #a = r'\\corp.hhnk.nl\data\Hydrologen_data\Data\02.modellen\model_test_v2\02_Model\model_settings.xlsx'
        if os.path.exists(folder_path):
            try:
                self.settings_df = pd.read_excel(folder_path)
                self.settings_df.set_index('name', drop=False, inplace=True)
                for index, row in self.settings_df.iterrows():
                    item_name = index
                    print(item_name)
                    if item_name not in self.get_lst_items(listwidget=self.dlg.listWidget2):
                        self.dlg.listWidget2.addItem(QListWidgetItem(item_name))
                        
                        print ('Not selected Model' )
            except Exception as e:

                for item_name in self.get_lst_items(listwidget=self.dlg.listWidget2):
                    print (item_name)

                


    
    def add_location(self):
        a = r'\\corp.hhnk.nl\data\Hydrologen_data\Data\02.modellen\model_test_v2\02_Model\model_settings.xlsx'
        self.settings_df = pd.read_excel(a)
        self.dlg.listWidget3.addItem(QListWidgetItem(a))
    

    def get_lst_items(self, listwidget):
        items = []
        for x in range(listwidget.count()):
            items.append(listwidget.item(x).text())
        return items

    # def iterlist(self):  
    #     "Juan"
    #     a = r'\\corp.hhnk.nl\data\Hydrologen_data\Data\02.modellen\model_test_v2\02_Model\model_settings.xlsx'
    #     self.settings_df = pd.read_excel(a)
        
    #     lst_items = self.get_lst_items(listwidget=self.dlg.listWidget2)
        
    #     for value in lst_items:
    #             row = lst_items
    #         # create_schematisation(row)
    #             print (row) 
    #             print ('hello 1')
    #             #print (row.create_new_sqlite())   
    #     # if row == value:
    #     if row['name'] in self.settings_df == value:
    #             print ('hello 2!')
    #             #print(row)
    #             try:
    #                 #value.create_schematisofns(row)
    #                  print ('hello!3')
    #             except Exception as e:
    #                  print ('buhhhh')
    #     else:
    #             print ('no way')
#%%           
    def iterlist(self):
        "Wietse"
        lst_items = self.get_lst_items(listwidget=self.dlg.listWidget2)
        for list_name in lst_items:
            row = self.settings_df.loc[list_name]


            try:                                  
                    #print('hello3!')
                    #Create schematisation...
                    create_schematisation(name=list_name, row=row)
                    #print ('done')

            except Exception as e:
                    #print("error")
                    raise e
        

#%%

# lst_items = fucntion_to_get_items_from_list()
# for lst_item (name) in lst_items:
#     #Get row that corresponds to name
#     row = settings_dataframe.loc[name] #Given that col 'name' is set as index. 

#     #Call create_Schematisation
#     create_schematisation(input_variables)

# %%


    def run(self):

        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ExampleDialog()
            # self.add_models()
            self.add_location()
            

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop       
        self.dlg.pb__log_in.clicked.connect(self.get_api)
        self.dlg.localsave.fileChanged.connect(self.add_models)
        self.dlg.localsave.setFilePath(r'\\corp.hhnk.nl\data\Hydrologen_data\Data\02.modellen\model_test_v2\02_Model\model_settings.xlsx')
        self.dlg.run_push_btn.clicked.connect(self.iterlist)


        # result = self.dlg.exec_()
        # if result:
        #     print('hello')
        #     folder_path = self.dlg.localsave.filePath()
        #     self.add_models(folder_path)
        
        
    
# %%
